#pragma once
#include "register.hpp"
namespace stm32f0x0::stk {
template <const cpp_register::RegisterAddress address> struct STK_T {	static constexpr cpp_register::Register<address + 0x0, cpp_register::AccessMode::RW, uint32_t, struct CSR> CSR{};	static constexpr cpp_register::Register<address + 0x4, cpp_register::AccessMode::RW, uint32_t, struct RVR> RVR{};	static constexpr cpp_register::Register<address + 0x8, cpp_register::AccessMode::RW, uint32_t, struct CVR> CVR{};	static constexpr cpp_register::Register<address + 0xC, cpp_register::AccessMode::RW, uint32_t, struct CALIB> CALIB{};};inline constexpr STK_T<0xE000E010> const *STK{}; struct STK_CSR {	static constexpr cpp_register::Field<decltype(STK->CSR), (1UL << 0), cpp_register::AccessMode::RW, 1> ENABLE{};	static constexpr cpp_register::Field<decltype(STK->CSR), (1UL << 1), cpp_register::AccessMode::RW, 1> TICKINT{};	static constexpr cpp_register::Field<decltype(STK->CSR), (1UL << 2), cpp_register::AccessMode::RW, 1> CLKSOURCE{};	static constexpr cpp_register::Field<decltype(STK->CSR), (1UL << 16), cpp_register::AccessMode::RW, 1> COUNTFLAG{};};struct STK_RVR {	static constexpr cpp_register::Field<decltype(STK->RVR), (1UL << 0), cpp_register::AccessMode::RW, 24> RELOAD{};};struct STK_CVR {	static constexpr cpp_register::Field<decltype(STK->CVR), (1UL << 0), cpp_register::AccessMode::RW, 24> CURRENT{};};struct STK_CALIB {	static constexpr cpp_register::Field<decltype(STK->CALIB), (1UL << 0), cpp_register::AccessMode::RW, 24> TENMS{};	static constexpr cpp_register::Field<decltype(STK->CALIB), (1UL << 30), cpp_register::AccessMode::RW, 1> SKEW{};	static constexpr cpp_register::Field<decltype(STK->CALIB), (1UL << 31), cpp_register::AccessMode::RW, 1> NOREF{};};}
